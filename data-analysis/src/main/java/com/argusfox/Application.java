package com.argusfox;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;import org.springframework.scheduling.annotation.EnableAsync;import org.springframework.web.client.RestTemplate;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import java.util.ArrayList;/** * @author fanghao */@ComponentScan(basePackages = "com.argusfox")@SpringBootApplication@EnableAsync//@EnableSwagger2public class Application {    public static void main(String[] args) {        System.setProperty("webdriver.chrome.driver", "C://driver//chromedriver.exe");        SpringApplication.run(Application.class, args);    }    @Bean    public Docket platformApi() {        return new Docket(DocumentationType.SWAGGER_2).groupName("argusfox")                .select()                .apis(RequestHandlerSelectors.any())                .paths(PathSelectors.regex("/argusfox/api/.*"))                .build()                .apiInfo(apiInfo());    }    private ApiInfo apiInfo() {        ApiInfo apiInfo = new ApiInfo(                "ArgusFox-个人专用",                "",                "1.0.0",                "https://github.com/ArgusFH",                new Contact("ArgusFox", "https://github.com/ArgusFH", "goudan6614@hotmail.com"),                "并哇呀儿",                "https://github.com/ArgusFH",                new ArrayList<>(1));        return apiInfo;    }    @Bean    RestTemplate restTemplate() {        HttpComponentsClientHttpRequestFactory httpRequestFactory = new HttpComponentsClientHttpRequestFactory();        httpRequestFactory.setConnectionRequestTimeout(60000);        httpRequestFactory.setConnectTimeout(60000);        httpRequestFactory.setReadTimeout(60000);        return new RestTemplate(httpRequestFactory);    }}